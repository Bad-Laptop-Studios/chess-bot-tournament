import chess
from tools.board import Piece

# ░ ▒ ▓ █

ROWS = 8
COLS = 8

def meta_element_addition(array: list[list[int]], x: int):
    return [[elem + x for elem in row] for row in array]

def meta_element_multiplication(array: list[list[int]], x: int):
    return [[elem * x for elem in row] for row in array]

def meta_element_inverse(array: list[list[int]], max: int):
    return [[max - elem for elem in row] for row in array]

def inverse(array: list[list[int]]):
    meta_max = max(elem for row in array for elem in row)
    return meta_element_inverse(array, meta_max + 1)

def find_positional_value(pieces: list[Piece], heat_map, multiplier=1):
    value = 0
    for piece in pieces:
        position = piece.position
        row = 9 - position.row # makes it so that row 0 is the bottow row
        col = position.col
        value += heat_map[row-1][col-1] * multiplier
    return value


# ██ ██ ██ ██ ██ ██ ██ ██
# ██ ██ ██ ██ ██ ██ ██ ██
# ▓▓ ▓▓ ▓▓ ▓▓ ▓▓ ▓▓ ▓▓ ▓▓
# ▓▓ ▓▓ ▓▓ ▓▓ ▓▓ ▓▓ ▓▓ ▓▓
# ▒▒ ▒▒ ▒▒ ▒▒ ▒▒ ▒▒ ▒▒ ▒▒
# ▒▒ ▒▒ ▒▒ ▒▒ ▒▒ ▒▒ ▒▒ ▒▒
# ░░ ░░ ░░ ░░ ░░ ░░ ░░ ░░
# ░░ ░░ ░░ ░░ ░░ ░░ ░░ ░░
STAIRWAY = 1 * \
    [[8, 8, 8, 8, 8, 8, 8, 8],
     [7, 7, 7, 7, 7, 7, 7, 7],
     [6, 6, 6, 6, 6, 6, 6, 6],
     [5, 5, 5, 5, 5, 5, 5, 5],
     [4, 4, 4, 4, 4, 4, 4, 4],
     [3, 3, 3, 3, 3, 3, 3, 3],
     [2, 2, 2, 2, 2, 2, 2, 2],
     [1, 1, 1, 1, 1, 1, 1, 1],
    ]

# ░░ ░░ ░░ ░░ ░░ ░░ ░░ ░░
# ░░ ░░ ░░ ░░ ░░ ░░ ░░ ░░
# ▒▒ ▒▒ ▒▒ ▒▒ ▒▒ ▒▒ ▒▒ ▒▒
# ▒▒ ▒▒ ▒▒ ▒▒ ▒▒ ▒▒ ▒▒ ▒▒
# ▓▓ ▓▓ ▓▓ ▓▓ ▓▓ ▓▓ ▓▓ ▓▓
# ▓▓ ▓▓ ▓▓ ▓▓ ▓▓ ▓▓ ▓▓ ▓▓
# ██ ██ ██ ██ ██ ██ ██ ██
# ██ ██ ██ ██ ██ ██ ██ ██
REVERSE_STAIRWAY = 1 * \
    [[1, 1, 1, 1, 1, 1, 1, 1],
     [2, 2, 2, 2, 2, 2, 2, 2],
     [3, 3, 3, 3, 3, 3, 3, 3],
     [4, 4, 4, 4, 4, 4, 4, 4],
     [5, 5, 5, 5, 5, 5, 5, 5],
     [6, 6, 6, 6, 6, 6, 6, 6],
     [7, 7, 7, 7, 7, 7, 7, 7],
     [8, 8, 8, 8, 8, 8, 8, 8],
    ]
INVERSE_STAIRWAY = inverse(STAIRWAY)

# ░░ ░░ ░░ ░░ ░░ ░░ ░░ ░░
# ░░ ▒▒ ▒▒ ▒▒ ▒▒ ▒▒ ▒▒ ░░
# ░░ ▒▒ ▓▓ ▓▓ ▓▓ ▓▓ ▒▒ ░░
# ░░ ▒▒ ▓▓ ██ ██ ▓▓ ▒▒ ░░
# ░░ ▒▒ ▓▓ ██ ██ ▓▓ ▒▒ ░░
# ░░ ▒▒ ▓▓ ▓▓ ▓▓ ▓▓ ▒▒ ░░
# ░░ ▒▒ ▒▒ ▒▒ ▒▒ ▒▒ ▒▒ ░░
# ░░ ░░ ░░ ░░ ░░ ░░ ░░ ░░
CENTRE = 2 * \
    [[1, 1, 1, 1, 1, 1, 1, 1],
     [1, 2, 2, 2, 2, 2, 2, 1],
     [1, 2, 3, 3, 3, 3, 2, 1],
     [1, 2, 3, 4, 4, 3, 2, 1],
     [1, 2, 3, 4, 4, 3, 2, 1],
     [1, 2, 3, 3, 3, 3, 2, 1],
     [1, 2, 2, 2, 2, 2, 2, 1],
     [1, 1, 1, 1, 1, 1, 1, 1],
    ]
INVERSE_CENTRE = inverse(CENTRE)

# ░░ ░░ ▒▒ ▒▒ ▒▒ ▒▒ ░░ ░░
# ░░ ▒▒ ▒▒ ▓▓ ▓▓ ▒▒ ▒▒ ░░
# ▒▒ ▒▒ ▓▓ ▓▓ ▓▓ ▓▓ ▒▒ ▒▒
# ▒▒ ▓▓ ▓▓ ██ ██ ▓▓ ▓▓ ▒▒
# ▒▒ ▓▓ ▓▓ ██ ██ ▓▓ ▓▓ ▒▒
# ▒▒ ▒▒ ▓▓ ▓▓ ▓▓ ▓▓ ▒▒ ▒▒
# ░░ ▒▒ ▒▒ ▓▓ ▓▓ ▒▒ ▒▒ ░░
# ░░ ░░ ▒▒ ▒▒ ▒▒ ▒▒ ░░ ░░
DIAMOND = 1 * \
    [[1, 2, 3, 4, 4, 3, 2, 1],
     [2, 3, 4, 5, 5, 4, 3, 2],
     [3, 4, 5, 6, 6, 5, 4, 3],
     [4, 5, 6, 7, 7, 6, 5, 4],
     [4, 5, 6, 7, 7, 6, 5, 4],
     [3, 4, 5, 6, 6, 5, 4, 3],
     [2, 3, 4, 5, 5, 4, 3, 2],
     [1, 2, 3, 4, 4, 3, 2, 1],
    ]
INVERSE_DIAMOND = inverse(DIAMOND)

# ██ ██ ██ ██ ██ ██ ██ ██
# ██ ██ ██ ██ ██ ██ ██ ██
# ██ ██ ██ ██ ██ ██ ██ ██
# ██ ██ ██ ██ ██ ██ ██ ██
# ██ ██ ██ ██ ██ ██ ██ ██
# ██ ██ ██ ██ ██ ██ ██ ██
# ██ ██ ██ ██ ██ ██ ██ ██
# ██ ██ ██ ██ ██ ██ ██ ██
CONSTANT = 1 * \
    [[1, 1, 1, 1, 1, 1, 1, 1],
     [1, 1, 1, 1, 1, 1, 1, 1],
     [1, 1, 1, 1, 1, 1, 1, 1],
     [1, 1, 1, 1, 1, 1, 1, 1],
     [1, 1, 1, 1, 1, 1, 1, 1],
     [1, 1, 1, 1, 1, 1, 1, 1],
     [1, 1, 1, 1, 1, 1, 1, 1],
     [1, 1, 1, 1, 1, 1, 1, 1],
    ]

# ██ ██ ██ ██ ██ ██ ██ ██
# ██ ██ ██ ▓▓ ▓▓ ██ ██ ██
# ██ ██ ▓▓ ▓▓ ▓▓ ▓▓ ██ ██
# ██ ▓▓ ▓▓ ▒▒ ▒▒ ▓▓ ▓▓ ██
# ▓▓ ▓▓ ▒▒ ▒▒ ▒▒ ▒▒ ▓▓ ▓▓
# ▓▓ ▒▒ ▒▒ ░░ ░░ ▒▒ ▒▒ ▓▓
# ▒▒ ▒▒ ░░ ░░ ░░ ░░ ▒▒ ▒▒
# ▒▒ ░░ ░░ ░░ ░░ ░░ ░░ ▒▒
FORWARD_CORNERS = 1 * \
    [[8, 8, 7, 7, 7, 7, 8, 8],
     [8, 7, 7, 6, 6, 7, 7, 8],
     [7, 7, 6, 6, 6, 6, 7, 7],
     [7, 6, 6, 5, 5, 6, 6, 7],
     [6, 6, 5, 5, 5, 5, 6, 6],
     [6, 5, 5, 4, 4, 5, 5, 6],
     [5, 5, 4, 4, 4, 4, 5, 5],
     [5, 4, 4, 3, 3, 4, 4, 5],
    ]


FORWARD_CENTRE = 1 * \
    [[7, 7, 8, 8, 8, 8, 7, 7],
     [6, 7, 7, 8, 8, 7, 7, 6],
     [6, 6, 7, 7, 7, 7, 6, 6],
     [5, 6, 6, 7, 7, 6, 6, 5],
     [5, 5, 6, 6, 6, 6, 5, 5],
     [4, 5, 5, 6, 6, 5, 5, 4],
     [4, 4, 5, 5, 5, 5, 4, 4],
     [3, 4, 4, 5, 5, 4, 4, 3],
    ]
